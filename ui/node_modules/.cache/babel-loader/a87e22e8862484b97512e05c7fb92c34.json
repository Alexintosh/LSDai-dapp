{"ast":null,"code":"import _slicedToArray from \"/home/xiko/rdai/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/xiko/rdai/src/connectors.js\";\nimport React from 'react';\nimport './App.css';\nimport WalletConnectQRCodeModal from \"@walletconnect/qrcode-modal\";\nimport Web3Provider, { useWeb3Context, Web3Consumer } from \"web3-react\";\nimport { ethers } from \"ethers\";\nimport connectors from \"./connectors\";\n\nfunction App() {\n  return React.createElement(Web3Provider, {\n    connectors: connectors,\n    libraryName: \"ethers.js\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(MyComponent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  })));\n}\n\nexport default App;\n\nfunction MyComponent() {\n  const context = useWeb3Context();\n  console.log(context);\n\n  if (context.error) {\n    console.error(\"Error!\");\n  }\n\n  if (context.active && context.connectorName === \"WalletConnect\") {\n    if (!context.account) {\n      WalletConnectQRCodeModal.open(context.connector.walletConnector.uri, () => {});\n    } else {\n      try {\n        WalletConnectQRCodeModal.close();\n      } catch {}\n    }\n  }\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        transactionHash = _React$useState2[0],\n        setTransactionHash = _React$useState2[1];\n\n  function sendTransaction() {\n    const signer = context.library.getSigner();\n    signer.sendTransaction({\n      to: ethers.constants.AddressZero,\n      value: ethers.utils.bigNumberify(\"0\")\n    }).then(({\n      hash\n    }) => {\n      setTransactionHash(hash);\n    });\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"web3-react Demo\"), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"(latest)\"), React.createElement(Web3ConsumerComponent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), context.error && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"An error occurred, check the console for details.\"), Object.keys(connectors).map(connectorName => React.createElement(\"button\", {\n    key: connectorName,\n    disabled: context.connectorName === connectorName,\n    onClick: () => context.setConnector(connectorName),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Activate \", connectorName)), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), (context.active || context.error && context.connectorName) && React.createElement(\"button\", {\n    onClick: () => context.unsetConnector(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, context.active ? \"Deactivate Connector\" : \"Reset\"), context.active && context.account && !transactionHash && React.createElement(\"button\", {\n    onClick: sendTransaction,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Send Dummy Transaction\"), transactionHash && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, transactionHash));\n}\n\nfunction Web3ConsumerComponent() {\n  return React.createElement(Web3Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, context => {\n    const active = context.active,\n          connectorName = context.connectorName,\n          account = context.account,\n          networkId = context.networkId;\n    return active && React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Active Connector: \", connectorName), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Account: \", account || \"None\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Network ID: \", networkId));\n  });\n}","map":{"version":3,"sources":["/home/xiko/rdai/src/connectors.js"],"names":["React","WalletConnectQRCodeModal","Web3Provider","useWeb3Context","Web3Consumer","ethers","connectors","App","MyComponent","context","console","log","error","active","connectorName","account","open","connector","walletConnector","uri","close","useState","transactionHash","setTransactionHash","sendTransaction","signer","library","getSigner","to","constants","AddressZero","value","utils","bigNumberify","then","hash","Object","keys","map","setConnector","unsetConnector","Web3ConsumerComponent","networkId"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport WalletConnectQRCodeModal from \"@walletconnect/qrcode-modal\";\nimport Web3Provider, { useWeb3Context, Web3Consumer } from \"web3-react\";\nimport { ethers } from \"ethers\";\n\nimport connectors from \"./connectors\";\n\nfunction App() {\n  return (\n    <Web3Provider connectors={connectors} libraryName=\"ethers.js\">\n      <div className=\"App\">\n        <MyComponent />\n      </div>\n    </Web3Provider>\n  );\n}\n\nexport default App;\n\nfunction MyComponent() {\n  const context = useWeb3Context();\n\n  console.log(context);\n\n  if (context.error) {\n    console.error(\"Error!\");\n  }\n\n  if (context.active && context.connectorName === \"WalletConnect\") {\n    if (!context.account) {\n      WalletConnectQRCodeModal.open(\n        context.connector.walletConnector.uri,\n        () => {}\n      );\n    } else {\n      try {\n        WalletConnectQRCodeModal.close();\n      } catch {}\n    }\n  }\n\n  const [transactionHash, setTransactionHash] = React.useState();\n\n  function sendTransaction() {\n    const signer = context.library.getSigner();\n\n    signer\n      .sendTransaction({\n        to: ethers.constants.AddressZero,\n        value: ethers.utils.bigNumberify(\"0\")\n      })\n      .then(({ hash }) => {\n        setTransactionHash(hash);\n      });\n  }\n\n  return (\n    <React.Fragment>\n      <h1>web3-react Demo</h1>\n      <h3>(latest)</h3>\n\n      <Web3ConsumerComponent />\n\n      {context.error && (\n        <p>An error occurred, check the console for details.</p>\n      )}\n\n      {Object.keys(connectors).map(connectorName => (\n        <button\n          key={connectorName}\n          disabled={context.connectorName === connectorName}\n          onClick={() => context.setConnector(connectorName)}\n        >\n          Activate {connectorName}\n        </button>\n      ))}\n\n      <br />\n      <br />\n\n      {(context.active || (context.error && context.connectorName)) && (\n        <button onClick={() => context.unsetConnector()}>\n          {context.active ? \"Deactivate Connector\" : \"Reset\"}\n        </button>\n      )}\n\n      {context.active && context.account && !transactionHash && (\n        <button onClick={sendTransaction}>Send Dummy Transaction</button>\n      )}\n\n      {transactionHash && <p>{transactionHash}</p>}\n    </React.Fragment>\n  );\n}\n\nfunction Web3ConsumerComponent() {\n  return (\n    <Web3Consumer>\n      {context => {\n        const { active, connectorName, account, networkId } = context;\n        return (\n          active && (\n            <React.Fragment>\n              <p>Active Connector: {connectorName}</p>\n              <p>Account: {account || \"None\"}</p>\n              <p>Network ID: {networkId}</p>\n            </React.Fragment>\n          )\n        );\n      }}\n    </Web3Consumer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}