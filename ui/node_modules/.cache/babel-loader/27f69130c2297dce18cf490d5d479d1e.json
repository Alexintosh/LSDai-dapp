{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.clearTimeout = exports.dispose = exports.postMessage = exports.init = exports.messagePromises = exports.error = exports.timeout = exports.initPromise = exports.origin = exports.instance = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _deferred = require(\"../utils/deferred\");\n\nvar _ui = require(\"../constants/ui\");\n\nvar _errors = require(\"../constants/errors\");\n\nvar _inlineStyles = _interopRequireDefault(require(\"./inline-styles\"));\n\nvar instance;\nexports.instance = instance;\nvar origin;\nexports.origin = origin;\nvar initPromise = (0, _deferred.create)();\nexports.initPromise = initPromise;\nvar timeout = 0;\nexports.timeout = timeout;\nvar error;\nexports.error = error;\nvar _messageID = 0; // every postMessage to iframe has its own promise to resolve\n\nvar messagePromises = {};\nexports.messagePromises = messagePromises;\n\nvar init =\n/*#__PURE__*/\nfunction () {\n  var _ref = (0, _asyncToGenerator2.default)(\n  /*#__PURE__*/\n  _regenerator.default.mark(function _callee(settings) {\n    var existedFrame, manifest, src, iframeSrcHost, onLoad;\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            existedFrame = document.getElementById('trezorconnect');\n\n            if (existedFrame) {\n              exports.instance = instance = existedFrame;\n            } else {\n              exports.instance = instance = document.createElement('iframe');\n              instance.frameBorder = '0';\n              instance.width = '0px';\n              instance.height = '0px';\n              instance.style.position = 'absolute';\n              instance.style.display = 'none';\n              instance.style.border = '0px';\n              instance.style.width = '0px';\n              instance.style.height = '0px';\n              instance.id = 'trezorconnect';\n            }\n\n            manifest = \"&version=\" + settings.version + \"&manifest=\" + encodeURIComponent(btoa(JSON.stringify(settings.manifest)));\n            src = settings.iframeSrc + \"?\" + Date.now() + manifest;\n            instance.setAttribute('src', src);\n\n            if (settings.webusb) {\n              instance.setAttribute('allow', 'usb');\n            } // eslint-disable-next-line no-irregular-whitespace, no-useless-escape\n\n\n            iframeSrcHost = instance.src.match(/^.+\\:\\/\\/[^\\/]+/);\n\n            if (iframeSrcHost && iframeSrcHost.length > 0) {\n              exports.origin = origin = iframeSrcHost[0];\n            }\n\n            exports.timeout = timeout = window.setTimeout(function () {\n              initPromise.reject(_errors.IFRAME_TIMEOUT);\n            }, 10000);\n\n            onLoad = function onLoad() {\n              if (!instance) {\n                initPromise.reject(_errors.IFRAME_BLOCKED);\n                return;\n              }\n\n              try {\n                // if hosting page is able to access cross-origin location it means that the iframe is not loaded\n                var iframeOrigin = instance.contentWindow.location.origin;\n\n                if (!iframeOrigin || iframeOrigin === 'null') {\n                  // eslint-disable-next-line no-use-before-define\n                  handleIframeBlocked();\n                  return;\n                }\n              } catch (e) {// empty\n              }\n\n              var extension; // $FlowIssue chrome is not declared outside\n\n              if (typeof chrome !== 'undefined' && chrome.runtime && typeof chrome.runtime.onConnect !== 'undefined') {\n                chrome.runtime.onConnect.addListener(function () {});\n                extension = chrome.runtime.id;\n              }\n\n              instance.contentWindow.postMessage({\n                type: _ui.IFRAME_HANDSHAKE,\n                payload: {\n                  settings: settings,\n                  extension: extension\n                }\n              }, origin);\n              instance.onload = undefined;\n            }; // IE hack\n\n\n            if (instance.attachEvent) {\n              instance.attachEvent('onload', onLoad);\n            } else {\n              instance.onload = onLoad;\n            } // inject iframe into host document body\n\n\n            if (document.body) {\n              document.body.appendChild(instance); // eslint-disable-next-line no-use-before-define\n\n              injectStyleSheet();\n            }\n\n            _context.prev = 12;\n            _context.next = 15;\n            return initPromise.promise;\n\n          case 15:\n            _context.next = 20;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](12);\n            throw _context.t0.message || _context.t0;\n\n          case 20:\n            _context.prev = 20;\n            window.clearTimeout(timeout);\n            exports.timeout = timeout = 0;\n            return _context.finish(20);\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[12, 17, 20, 24]]);\n  }));\n\n  return function init(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.init = init;\n\nvar injectStyleSheet = function injectStyleSheet() {\n  if (!instance) {\n    throw _errors.IFRAME_BLOCKED;\n  }\n\n  var doc = instance.ownerDocument;\n  var head = doc.head || doc.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.setAttribute('type', 'text/css');\n  style.setAttribute('id', 'TrezorConnectStylesheet'); // $FlowIssue\n\n  if (style.styleSheet) {\n    // IE\n    // $FlowIssue\n    style.styleSheet.cssText = _inlineStyles.default;\n  } else {\n    style.appendChild(document.createTextNode(_inlineStyles.default));\n  }\n\n  head.append(style);\n};\n\nvar handleIframeBlocked = function handleIframeBlocked() {\n  window.clearTimeout(timeout);\n  exports.error = error = _errors.IFRAME_BLOCKED.message; // eslint-disable-next-line no-use-before-define\n\n  dispose();\n  initPromise.reject(_errors.IFRAME_BLOCKED);\n}; // post messages to iframe\n\n\nvar postMessage = function postMessage(message, usePromise) {\n  if (usePromise === void 0) {\n    usePromise = true;\n  }\n\n  if (!instance) {\n    throw _errors.IFRAME_BLOCKED;\n  }\n\n  if (usePromise) {\n    _messageID++;\n    message.id = _messageID;\n    messagePromises[_messageID] = (0, _deferred.create)();\n    instance.contentWindow.postMessage(message, origin);\n    return messagePromises[_messageID].promise;\n  }\n\n  instance.contentWindow.postMessage(message, origin);\n  return null;\n};\n\nexports.postMessage = postMessage;\n\nvar dispose = function dispose() {\n  if (instance && instance.parentNode) {\n    try {\n      instance.parentNode.removeChild(instance);\n    } catch (error) {// do nothing\n    }\n  }\n\n  exports.instance = instance = null;\n  exports.timeout = timeout = 0;\n};\n\nexports.dispose = dispose;\n\nvar clearTimeout = function clearTimeout() {\n  window.clearTimeout(timeout);\n};\n\nexports.clearTimeout = clearTimeout;","map":null,"metadata":{},"sourceType":"script"}