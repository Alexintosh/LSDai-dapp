{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethers_1 = require(\"ethers\");\n\nvar react_1 = require(\"react\");\n\nexports.ManagerErrorCodes = ['UNEXPECTED_ERROR', 'ALL_CONNECTORS_INVALID'].reduce(function (accumulator, currentValue) {\n  accumulator[currentValue] = currentValue;\n  return accumulator;\n}, {});\nvar unexpectedErrorMessage = 'web3-react encountered an unexpected internal error. See the console for details.';\nvar unexpectedError = Error(unexpectedErrorMessage);\nunexpectedError.code = exports.ManagerErrorCodes.UNEXPECTED_ERROR;\nvar initialWeb3State = {\n  account: undefined,\n  connectorName: undefined,\n  error: null,\n  networkId: undefined,\n  provider: undefined\n};\n\nfunction normalizeAccount(account) {\n  return account === null ? account : ethers_1.ethers.utils.getAddress(account);\n}\n\nfunction useRefId() {\n  var refId = react_1.useRef(0);\n\n  function increment() {\n    refId.current += 1;\n  }\n\n  return [refId, increment];\n}\n\nfunction usePrevious(trackedValue) {\n  var ref = react_1.useRef();\n  react_1.useEffect(function () {\n    ref.current = trackedValue;\n  }, [trackedValue]);\n  return ref.current;\n}\n\nfunction web3StateReducer(state, action) {\n  switch (action.type) {\n    case 'UPDATE_CONNECTOR_VALUES':\n      {\n        var _a = action.payload,\n            connectorName = _a.connectorName,\n            provider = _a.provider,\n            networkId = _a.networkId,\n            account = _a.account;\n        return {\n          connectorName: connectorName,\n          provider: provider,\n          networkId: networkId,\n          account: normalizeAccount(account),\n          error: null\n        };\n      }\n\n    case 'UPDATE_NETWORK_ID':\n      {\n        var _b = action.payload,\n            provider = _b.provider,\n            networkId = _b.networkId;\n        return __assign({}, state, {\n          provider: provider || state.provider,\n          networkId: networkId,\n          error: null\n        });\n      }\n\n    case 'UPDATE_ACCOUNT':\n      {\n        var _c = action.payload,\n            provider = _c.provider,\n            account = _c.account;\n        return __assign({}, state, {\n          provider: provider || state.provider,\n          account: normalizeAccount(account),\n          error: null\n        });\n      }\n\n    case 'UPDATE_NETWORK_ID_AND_ACCOUNT':\n      {\n        var _d = action.payload,\n            provider = _d.provider,\n            networkId = _d.networkId,\n            account = _d.account;\n        return __assign({}, state, {\n          provider: provider || state.provider,\n          account: normalizeAccount(account),\n          error: null,\n          networkId: networkId\n        });\n      }\n\n    case 'SET_ERROR':\n      return __assign({}, initialWeb3State, {\n        error: action.payload\n      });\n\n    case 'SET_ERROR_PRESERVE_CONNECTOR_NAME':\n      return __assign({}, initialWeb3State, {\n        connectorName: state.connectorName,\n        error: action.payload\n      });\n\n    case 'SET_ERROR_WITH_CONNECTOR_NAME':\n      {\n        var _e = action.payload,\n            connectorName = _e.connectorName,\n            error = _e.error;\n        return __assign({}, initialWeb3State, {\n          connectorName: connectorName,\n          error: error\n        });\n      }\n\n    case 'RESET':\n      return initialWeb3State;\n\n    default:\n      {\n        // eslint-disable-next-line no-console\n        console.warn('Default case encountered in web3StateReducer. Please file an issue on Github.');\n        return __assign({}, state, {\n          provider: undefined,\n          networkId: undefined,\n          account: undefined,\n          error: unexpectedError\n        });\n      }\n  }\n}\n\nfunction useWeb3Manager(connectors) {\n  var _a = useRefId(),\n      refId = _a[0],\n      incrementRefId = _a[1]; // keep track of web3 state\n\n\n  var _b = react_1.useReducer(web3StateReducer, initialWeb3State),\n      web3State = _b[0],\n      dispatchWeb3State = _b[1];\n\n  var web3Initialized = !!(web3State.account !== undefined && web3State.connectorName && !web3State.error && web3State.provider && web3State.networkId); // keep track of active connector\n\n  var activeConnector = web3State.connectorName ? connectors[web3State.connectorName] : undefined; // function to set the error state.\n\n  function setError(error, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.preserveConnector,\n        preserveConnector = _c === void 0 ? true : _c,\n        connectorName = _b.connectorName;\n\n    if (connectorName) {\n      dispatchWeb3State({\n        type: 'SET_ERROR_WITH_CONNECTOR_NAME',\n        payload: {\n          error: error,\n          connectorName: connectorName\n        }\n      });\n    }\n\n    if (preserveConnector) {\n      dispatchWeb3State({\n        type: 'SET_ERROR_PRESERVE_CONNECTOR_NAME',\n        payload: error\n      });\n    } else {\n      dispatchWeb3State({\n        type: 'SET_ERROR',\n        payload: error\n      });\n    }\n  } // function to set a connector\n\n\n  function setConnector(connectorName, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.suppressAndThrowErrors,\n        suppressAndThrowErrors = _c === void 0 ? false : _c,\n        networkId = _b.networkId;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var callingTimeRefId, validConnectorNames, connector, provider_1, networkIdPromise, accountPromise, error_1;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            callingTimeRefId = refId.current;\n            incrementRefId();\n            validConnectorNames = Object.keys(connectors);\n            connector = connectors[connectorName];\n\n            if (!validConnectorNames.includes(connectorName)) {\n              // eslint-disable-next-line no-console\n              console.warn(\"'\" + connectorName + \"' is not a valid name, please pass one of: \" + validConnectorNames.join(', ') + \".\");\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (connectorName === web3State.connectorName) {\n              // eslint-disable-next-line no-console\n              console.warn(\"'\" + connectorName + \"' is already set. Calling 'setConnector' for a connector while it is active is a no-op.'\");\n              return [2\n              /*return*/\n              ];\n            }\n\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , connector.onActivation()];\n\n          case 2:\n            _d.sent();\n\n            return [4\n            /*yield*/\n            , connector.getProvider(networkId)];\n\n          case 3:\n            provider_1 = _d.sent();\n            networkIdPromise = connector.getNetworkId(provider_1);\n            accountPromise = connector.getAccount(provider_1);\n            return [4\n            /*yield*/\n            , Promise.all([networkIdPromise, accountPromise]).then(function (_a) {\n              var networkId = _a[0],\n                  account = _a[1];\n\n              if (refId.current !== callingTimeRefId + 1) {\n                // eslint-disable-next-line no-console\n                console.warn(\"Silently suppressing status update from stale connector '\" + connectorName + \"'.\");\n                return;\n              }\n\n              dispatchWeb3State({\n                payload: {\n                  connectorName: connectorName,\n                  provider: provider_1,\n                  networkId: networkId,\n                  account: account\n                },\n                type: 'UPDATE_CONNECTOR_VALUES'\n              });\n            })];\n\n          case 4:\n            _d.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            error_1 = _d.sent(); // if the component has re-rendered since this function was called, eat the error\n\n            if (refId.current !== callingTimeRefId + 1) {\n              // eslint-disable-next-line no-console\n              console.warn(\"Silently handling error from '\" + connectorName + \"': \" + error_1.toString());\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (suppressAndThrowErrors) {\n              throw error_1;\n            } else {\n              setError(error_1, {\n                connectorName: connectorName\n              });\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  } // expose a wrapper to set the first valid connector in a list\n\n\n  function setFirstValidConnector(connectorNames, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.suppressAndThrowErrors,\n        suppressAndThrowErrors = _c === void 0 ? false : _c,\n        _d = _b.networkIds,\n        networkIds = _d === void 0 ? [] : _d;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _i, connectorNames_1, connectorName, error_2, error_3;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _i = 0, connectorNames_1 = connectorNames;\n            _e.label = 1;\n\n          case 1:\n            if (!(_i < connectorNames_1.length)) return [3\n            /*break*/\n            , 6];\n            connectorName = connectorNames_1[_i];\n            _e.label = 2;\n\n          case 2:\n            _e.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , setConnector(connectorName, {\n              suppressAndThrowErrors: true,\n              networkId: networkIds[connectorNames.indexOf(connectorName)]\n            })];\n\n          case 3:\n            _e.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            error_2 = _e.sent();\n\n            if (connectorName === connectorNames[connectorNames.length - 1]) {\n              error_3 = Error('Unable to set any valid connector.');\n              error_3.code = exports.ManagerErrorCodes.ALL_CONNECTORS_INVALID;\n\n              if (suppressAndThrowErrors) {\n                throw error_3;\n              } else {\n                setError(error_3);\n              }\n            }\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 5:\n            _i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  } // function to unset the current connector\n\n\n  function unsetConnector() {\n    dispatchWeb3State({\n      type: 'RESET'\n    });\n  }\n\n  var lastConnector = usePrevious(activeConnector);\n  react_1.useEffect(function () {\n    if (activeConnector === undefined && lastConnector !== undefined) {\n      lastConnector.onDeactivation(web3State.error);\n    }\n  }, [activeConnector, lastConnector, web3State.error]);\n\n  function web3ReactUpdateHandler(_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.updateNetworkId,\n        updateNetworkId = _c === void 0 ? false : _c,\n        _d = _b.updateAccount,\n        updateAccount = _d === void 0 ? false : _d,\n        _e = _b.overrideNetworkIdCheck,\n        overrideNetworkIdCheck = _e === void 0 ? false : _e,\n        _f = _b.overrideAccountCheck,\n        overrideAccountCheck = _f === void 0 ? false : _f,\n        networkId = _b.networkId,\n        account = _b.account;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var fetchNewProvider_1, provider_2, fetchNewNetworkId_1, networkIdPromise, fetchNewAccount_1, accountPromise, error_4;\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            if (!activeConnector) {\n              // eslint-disable-next-line no-console\n              console.warn('No active connector in web3ReactUpdateHandler call. Please file an issue on Github.');\n              setError(unexpectedError);\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (!updateNetworkId && !updateAccount || updateNetworkId && overrideNetworkIdCheck && !networkId || updateAccount && overrideAccountCheck && !account) {\n              console.warn('Malformed parameters passed to web3ReactUpdateHandler.'); // eslint-disable-line no-console\n\n              setError(unexpectedError);\n              return [2\n              /*return*/\n              ];\n            } // no checks required\n\n\n            if ((!updateNetworkId || updateNetworkId && overrideNetworkIdCheck) && (!updateAccount || updateAccount && overrideAccountCheck)) {\n              if (updateNetworkId && !updateAccount) {\n                dispatchWeb3State({\n                  payload: {\n                    networkId: networkId\n                  },\n                  type: 'UPDATE_NETWORK_ID'\n                });\n              } else if (!updateNetworkId && updateAccount) {\n                dispatchWeb3State({\n                  payload: {\n                    account: account\n                  },\n                  type: 'UPDATE_ACCOUNT'\n                });\n              } else {\n                dispatchWeb3State({\n                  payload: {\n                    networkId: networkId,\n                    account: account\n                  },\n                  type: 'UPDATE_NETWORK_ID_AND_ACCOUNT'\n                });\n              }\n\n              return [2\n              /*return*/\n              ];\n            }\n\n            _g.label = 1;\n\n          case 1:\n            _g.trys.push([1, 4,, 5]);\n\n            fetchNewProvider_1 = !web3State.provider || updateNetworkId && !overrideNetworkIdCheck;\n            return [4\n            /*yield*/\n            , fetchNewProvider_1 ? activeConnector.getProvider(networkId) : web3State.provider];\n\n          case 2:\n            provider_2 = _g.sent();\n            fetchNewNetworkId_1 = web3State.networkId === undefined || updateNetworkId && !overrideNetworkIdCheck;\n            networkIdPromise = web3State.networkId === undefined || fetchNewNetworkId_1 ? activeConnector.getNetworkId(provider_2) : web3State.networkId;\n            fetchNewAccount_1 = web3State.account === undefined || updateAccount && !overrideAccountCheck;\n            accountPromise = web3State.account === undefined || fetchNewAccount_1 ? activeConnector.getAccount(provider_2) : web3State.account;\n            return [4\n            /*yield*/\n            , Promise.all([networkIdPromise, accountPromise]).then(function (_a) {\n              var returnedNetworkId = _a[0],\n                  returnedAccount = _a[1];\n\n              if (updateNetworkId && networkId && networkId !== returnedNetworkId) {\n                // eslint-disable-next-line no-console\n                console.warn(\"Mismatched networkIds in web3ReactUpdateHandler: \" + networkId + \" and \" + returnedNetworkId + \".\");\n                throw unexpectedError;\n              }\n\n              if (updateAccount && account && normalizeAccount(account) !== normalizeAccount(returnedAccount)) {\n                // eslint-disable-next-line no-console\n                console.warn(\"Mismatched accounts in web3ReactUpdateHandler: \" + normalizeAccount(account) + \" and \" + normalizeAccount(returnedAccount) + \".\");\n                throw unexpectedError;\n              }\n\n              if (fetchNewNetworkId_1 && !fetchNewAccount_1) {\n                dispatchWeb3State({\n                  payload: {\n                    provider: fetchNewProvider_1 ? provider_2 : undefined,\n                    networkId: returnedNetworkId\n                  },\n                  type: 'UPDATE_NETWORK_ID'\n                });\n              } else if (!fetchNewNetworkId_1 && fetchNewAccount_1) {\n                dispatchWeb3State({\n                  payload: {\n                    provider: fetchNewProvider_1 ? provider_2 : undefined,\n                    account: returnedAccount\n                  },\n                  type: 'UPDATE_ACCOUNT'\n                });\n              } else {\n                dispatchWeb3State({\n                  payload: {\n                    provider: fetchNewProvider_1 ? provider_2 : undefined,\n                    networkId: returnedNetworkId,\n                    account: returnedAccount\n                  },\n                  type: 'UPDATE_NETWORK_ID_AND_ACCOUNT'\n                });\n              }\n            })];\n\n          case 3:\n            _g.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_4 = _g.sent();\n            setError(error_4);\n            return [3\n            /*break*/\n            , 5];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }\n\n  function web3ReactErrorHandler(error, preserveConnector) {\n    if (preserveConnector === void 0) {\n      preserveConnector = true;\n    }\n\n    setError(error, {\n      preserveConnector: preserveConnector\n    });\n  }\n\n  function web3ReactResetHandler() {\n    unsetConnector();\n  }\n\n  react_1.useEffect(function () {\n    if (activeConnector) {\n      activeConnector.on('_web3ReactUpdate', web3ReactUpdateHandler);\n      activeConnector.on('_web3ReactError', web3ReactErrorHandler);\n      activeConnector.on('_web3ReactReset', web3ReactResetHandler);\n    }\n\n    return function () {\n      if (activeConnector) {\n        activeConnector.removeListener('_web3ReactUpdate', web3ReactUpdateHandler);\n        activeConnector.removeListener('_web3ReactError', web3ReactErrorHandler);\n        activeConnector.removeListener('_web3ReactReset', web3ReactResetHandler);\n      }\n    };\n  });\n  return {\n    web3Initialized: web3Initialized,\n    web3State: web3State,\n    connector: activeConnector,\n    setConnector: setConnector,\n    setFirstValidConnector: setFirstValidConnector,\n    unsetConnector: unsetConnector,\n    setError: setError\n  };\n}\n\nexports.default = useWeb3Manager;","map":null,"metadata":{},"sourceType":"script"}